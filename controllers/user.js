import UserModel from "../models/user.js"
import {getMainMenu} from "../keyboards.js";
import {inviteWishList} from "../inviteWishList.js";

async function handleUser(ctx) { // —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        const { first_name, id } = ctx.from;
        const userId = { userId: id };
        const existingUser = await findUser(userId);

        if (existingUser) {
            return ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${first_name}!`, getMainMenu(), { reply_markup: null });
        } else {
            const uniqueInviteCode = await inviteWishList();
            await UserModel.create({ userName: first_name, userId: id, inviteCode: uniqueInviteCode });
            return ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${first_name}!`, getMainMenu(), { reply_markup: null });
        }
    } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/a1eesc.');
    }
}

async function findUser(obj) { // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        return UserModel.findOne(obj);
    } catch (err) {
        console.log(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —é–∑–µ—Ä–∞ ${err}`)
    }
}

async function hasUser(ctx) { // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    try {
        const { id } = ctx.from;
        const userId = { userId: id };
        const existingUser = await findUser(userId)
        return !!existingUser;
    } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —é–∑–µ—Ä–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/a1eesc.');
    }
}

async function addUserToUser(ctx, filter, userToAdd, myUserId, userName) { // –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
        const myUser = await findUser(myUserId)
        const { addedUsers } = myUser;
        if (userToAdd.userId.toString() === myUserId.userId.toString()) {
            return ctx.reply('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è ü•∫', getMainMenu(), { reply_markup: null });
        } else if (addedUsers.map((i) => i.userId).includes(userToAdd.userId.toString())) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω ü•∫', getMainMenu(), { reply_markup: null });
        } else if (addedUsers.map((i) => i.userName).includes(userName)) {
            return ctx.reply('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫–æ–π —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ ü•∫', getMainMenu(), { reply_markup: null });
        } else {
            await UserModel.findOneAndUpdate(
                filter,
                { $addToSet: { addedUsers: { userId: userToAdd.userId, userName: userName } } },
                { new: true },
            );
            await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (${userToAdd.userName}) –¥–æ–±–∞–≤–ª–µ–Ω!`, getMainMenu(), { reply_markup: null });
        }
    } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ https://t.me/a1eesc.');
    }
}

async function getAddedUsers(myUserId) { // –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const myUser = await findUser({ userId: myUserId });
    return myUser.addedUsers;
}

export { handleUser, hasUser, findUser, addUserToUser, getAddedUsers };
