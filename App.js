import express from 'express';
import {botInstructions, PORT} from './config.js';
import {Telegraf} from 'telegraf';
import mongoose from 'mongoose';
import { getAddedUsers, handleUser, hasUser } from "./controllers/user.js";
import { createWish, getFriendsWishItems, getWishItemInMessage, handleCreate } from "./createWishList.js";
import { session, sessionReset } from "./session.js";
import { getMainMenu, getWishItems } from "./keyboards.js";
import { addUser, getInviteCode, handleInviteCode } from "./inviteWishList.js";
import { getWishList } from "./controllers/wishList.js";
import dotenv from 'dotenv';

dotenv.config();

const { TOKEN } = process.env


const app = express();
const bot = new Telegraf(TOKEN);

mongoose.connect('mongodb://127.0.0.1:27017/wishlist').then(r => console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB'));

async function botMessage(ctx) {
    try {
        const chatId = ctx.message.chat.id;
        const messageText = ctx.message.text;

        if (!await hasUser(ctx)) {
            await handleUser(ctx);
        }

        if (!session.has(chatId)) {
            session.set(chatId, {});
        }

        switch (messageText) {
            case '/start':
                sessionReset(chatId);
                ctx.reply('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', getMainMenu(), { reply_markup: null });
                break;
            case 'üåü –°–æ–∑–¥–∞—Ç—å –≤–∏—à-–∞–π—Ç–µ–º':
                sessionReset(chatId);
                await handleCreate(ctx, chatId);
                break;
            case 'üì§ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥':
                ctx.reply(await getInviteCode(ctx, chatId));
                break;
            case 'üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏':
                ctx.replyWithHTML(botInstructions);
                break;
            case 'üîë –í–≤–µ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥':
                await handleInviteCode(ctx, chatId);
                break;
            case 'üìã –ú–æ–∏ –≤–∏—à-–∞–π—Ç–µ–º—ã':
                await getWishList(ctx, chatId, chatId);
                break;
            case 'üë´ –í–∏—à-–∞–π—Ç–µ–º—ã –¥—Ä—É–∑–µ–π':
                session.get(chatId).friendsWishItems = true;
                const addedUsers = await getAddedUsers(chatId);
                const userNames = addedUsers.map((i) => i.userName);
                ctx.reply('–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:', getWishItems(userNames), { reply_markup: null });
                break;
            case 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ':
                sessionReset(chatId);
                ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—à-–∞–π—Ç–µ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', getMainMenu(), { reply_markup: null });
                break;
            case 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                sessionReset(chatId);
                ctx.reply('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', getMainMenu(), { reply_markup: null });
                break;
            default:
                await handleOtherMessages(ctx, chatId, messageText);
                break;
        }
    } catch (err) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', err);
    }
}

let messageCount = 0;
const messagesPerSecondLimit = 25;
const timeWindow = 1000;

bot.on('message', (ctx) => { // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messageCount++;
    if (messageCount <= messagesPerSecondLimit) {
         botMessage(ctx)
    } else {
        setTimeout(() => {
            messageCount = 0;
        }, timeWindow);
    }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleOtherMessages(ctx, chatId, messageText) {
    const { wishItem, addInviteCode, getWishLists, friendsWishItems } = session.get(chatId);

    if (wishItem) {
        await createWish(ctx, chatId, messageText, bot);

    } else if (addInviteCode) {
        await addUser(ctx, chatId);

    } else if (getWishLists) {
        const selectedItem = getWishLists.filter((i) => messageText.startsWith(i.title))[0];
        return selectedItem
            ? getWishItemInMessage(ctx, selectedItem)
            : ctx.reply('–ê–π—Ç–µ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    } else if (friendsWishItems) {
        await getFriendsWishItems(ctx, chatId, messageText);
    } else {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, /start');
    }
}

bot.launch()
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`))

